package lockscreen.gpaddy.com.lockscreen.activity;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.preference.PreferenceManager;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Gallery;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import java.util.ArrayList;import lockscreen.gpaddy.com.lockscreen.R;import lockscreen.gpaddy.com.lockscreen.adapter.AdapterGalery;import lockscreen.gpaddy.com.lockscreen.entity.BackEntity;import lockscreen.gpaddy.com.lockscreen.util.Blur;import lockscreen.gpaddy.com.lockscreen.util.MyApplication;import lockscreen.gpaddy.com.lockscreen.util.RealPathUtil;import lockscreen.gpaddy.com.lockscreen.util.Utils;import lockscreen.gpaddy.com.lockscreen.util.Values;@SuppressLint("InflateParams")@SuppressWarnings({"deprecation", "unused"})public class PaddyGetBackgroundActivity extends Activity {    private static final int RESULT_LOAD_IMAGE = 0;    private ArrayList<BackEntity> myListBackEntities = new ArrayList<BackEntity>();    private ArrayList<BackEntity> mySListBackEntities = new ArrayList<BackEntity>();    private ViewGroup mViewGroup;    private ViewHolderGetBackground mViewHolderGetBackground;    private int background;    private SharedPreferences sharedpreference;    private Editor mEditor;    @Override    protected void onCreate(Bundle savedInstanceState) {        // TODO Auto-generated method stub        super.onCreate(savedInstanceState);        sharedpreference = PreferenceManager.getDefaultSharedPreferences(PaddyGetBackgroundActivity.this);        mEditor = sharedpreference.edit();        if (mViewGroup == null) {            mViewGroup = (ViewGroup) LayoutInflater.from(getApplicationContext())                    .inflate(R.layout.paddy_activity_choice_background, null);            mViewHolderGetBackground = new ViewHolderGetBackground(mViewGroup);            mViewGroup.setTag(mViewHolderGetBackground);        } else {            mViewHolderGetBackground = (ViewHolderGetBackground) mViewGroup.getTag();        }        setContentView(mViewGroup);        mViewHolderGetBackground.setListener();    }    class ViewHolderGetBackground {        private ImageView kenburnsview_background_choice;        private RelativeLayout layout_action_bottom_choice_background;        private Gallery galery_picture_background;        private TextView text_choice_from_other;        private ImageView image_apply_choice_background;        public ViewHolderGetBackground(ViewGroup mViewGroup) {            bindView(mViewGroup);        }        private void bindView(ViewGroup mViewGroup) {            // TODO Auto-generated method stub            kenburnsview_background_choice = (ImageView) mViewGroup                    .findViewById(R.id.kenburnsview_background_choice);            layout_action_bottom_choice_background = (RelativeLayout) mViewGroup                    .findViewById(R.id.layout_action_bottom_choice_background);            galery_picture_background = (Gallery) mViewGroup.findViewById(R.id.galery_picture_background);            text_choice_from_other = (TextView) mViewGroup.findViewById(R.id.text_choice_from_other);            image_apply_choice_background = (ImageView) mViewGroup.findViewById(R.id.image_apply_choice_background);            getData();        }        private void getData() {            // TODO Auto-generated method stub            myListBackEntities.add(new BackEntity(R.drawable.b1));            myListBackEntities.add(new BackEntity(R.drawable.b2));            myListBackEntities.add(new BackEntity(R.drawable.b3));            myListBackEntities.add(new BackEntity(R.drawable.b4));            myListBackEntities.add(new BackEntity(R.drawable.b5));            myListBackEntities.add(new BackEntity(R.drawable.b6));            myListBackEntities.add(new BackEntity(R.drawable.b7));            myListBackEntities.add(new BackEntity(R.drawable.b8));            myListBackEntities.add(new BackEntity(R.drawable.b9));            myListBackEntities.add(new BackEntity(R.drawable.b10));            myListBackEntities.add(new BackEntity(R.drawable.b11));            myListBackEntities.add(new BackEntity(R.drawable.b12));            myListBackEntities.add(new BackEntity(R.drawable.b13));            myListBackEntities.add(new BackEntity(R.drawable.b14));            myListBackEntities.add(new BackEntity(R.drawable.b15));            myListBackEntities.add(new BackEntity(R.drawable.b16));            myListBackEntities.add(new BackEntity(R.drawable.b17));            myListBackEntities.add(new BackEntity(R.drawable.b18));            myListBackEntities.add(new BackEntity(R.drawable.b19));            myListBackEntities.add(new BackEntity(R.drawable.b20));            myListBackEntities.add(new BackEntity(R.drawable.b21));            myListBackEntities.add(new BackEntity(R.drawable.b22));            myListBackEntities.add(new BackEntity(R.drawable.b23));            myListBackEntities.add(new BackEntity(R.drawable.b24));            myListBackEntities.add(new BackEntity(R.drawable.b25));            myListBackEntities.add(new BackEntity(R.drawable.b26));            myListBackEntities.add(new BackEntity(R.drawable.b27));            myListBackEntities.add(new BackEntity(R.drawable.b28));            myListBackEntities.add(new BackEntity(R.drawable.b29));            myListBackEntities.add(new BackEntity(R.drawable.b30));            mySListBackEntities.add(new BackEntity(R.drawable.b1s));            mySListBackEntities.add(new BackEntity(R.drawable.b2s));            mySListBackEntities.add(new BackEntity(R.drawable.b3s));            mySListBackEntities.add(new BackEntity(R.drawable.b4s));            mySListBackEntities.add(new BackEntity(R.drawable.b5s));            mySListBackEntities.add(new BackEntity(R.drawable.b6s));            mySListBackEntities.add(new BackEntity(R.drawable.b7s));            mySListBackEntities.add(new BackEntity(R.drawable.b8s));            mySListBackEntities.add(new BackEntity(R.drawable.b9s));            mySListBackEntities.add(new BackEntity(R.drawable.b10s));            mySListBackEntities.add(new BackEntity(R.drawable.b11s));            mySListBackEntities.add(new BackEntity(R.drawable.b12s));            mySListBackEntities.add(new BackEntity(R.drawable.b13s));            mySListBackEntities.add(new BackEntity(R.drawable.b14s));            mySListBackEntities.add(new BackEntity(R.drawable.b15s));            mySListBackEntities.add(new BackEntity(R.drawable.b16s));            mySListBackEntities.add(new BackEntity(R.drawable.b17s));            mySListBackEntities.add(new BackEntity(R.drawable.b18s));            mySListBackEntities.add(new BackEntity(R.drawable.b19s));            mySListBackEntities.add(new BackEntity(R.drawable.b20s));            mySListBackEntities.add(new BackEntity(R.drawable.b21s));            mySListBackEntities.add(new BackEntity(R.drawable.b22s));            mySListBackEntities.add(new BackEntity(R.drawable.b23s));            mySListBackEntities.add(new BackEntity(R.drawable.b24s));            mySListBackEntities.add(new BackEntity(R.drawable.b25s));            mySListBackEntities.add(new BackEntity(R.drawable.b26s));            mySListBackEntities.add(new BackEntity(R.drawable.b27s));            mySListBackEntities.add(new BackEntity(R.drawable.b28s));            mySListBackEntities.add(new BackEntity(R.drawable.b29s));            mySListBackEntities.add(new BackEntity(R.drawable.b30s));        }        private void setListener() {            galery_picture_background                    .setAdapter(new AdapterGalery(PaddyGetBackgroundActivity.this, 0, mySListBackEntities));            loadImage();            galery_picture_background.setSpacing(10);            image_apply_choice_background.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    int position = galery_picture_background.getSelectedItemPosition();                    BackEntity mBackEntitySelected = myListBackEntities.get(position);					/*Toast.makeText(getApplicationContext(), "Item select: " + mBackEntitySelected.getResources(),                            Toast.LENGTH_LONG).show();*/                    mEditor.putInt(Values.BACKGROUND_RESOURCE_ID, mBackEntitySelected.getResources());                    mEditor.putBoolean(Values.BACKGROUND_RESOUECE_BOLEAN, true);                    mEditor.commit();                    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), mBackEntitySelected.getResources());                    Bitmap blur = Blur.fastblur(PaddyGetBackgroundActivity.this, bitmap, 25);                    MyApplication.blur = blur;//                    MyApplication.notBlur = BitmapFactory.decodeResource(getResources(), mBackEntitySelected.getResources());                    finish();                    Intent intent = new Intent("com.gppady.launcher.change");                    sendBroadcast(intent);//                    GPApplication.getBlur(PaddyGetBackgroundActivity.this);                    overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);                }            });            text_choice_from_other.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    // TODO Auto-generated method stub//                     Intent i = new Intent(Intent.ACTION_PICK,//                     android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);//                     startActivityForResult(i, RESULT_LOAD_IMAGE);//                    Toast.makeText(getApplicationContext(), "Comming soon", Toast.LENGTH_SHORT).show();                    Utils.getBackgroundEx(PaddyGetBackgroundActivity.this);                }            });            galery_picture_background.setOnItemClickListener(new OnItemClickListener() {                @Override                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                    BackEntity mBackEntitySelected = myListBackEntities.get(position);                    //BackEntity mBackEntitySelected = (BackEntity) galery_picture_background.getItemAtPosition(position);                    //Toast.makeText(getApplicationContext(), "Item select: " + mBackEntitySelected.getResources(),                    //Toast.LENGTH_LONG).show();                    kenburnsview_background_choice.setImageResource(mBackEntitySelected.getResources());                }            });        }        private void loadImage() {            sharedpreference = PreferenceManager.getDefaultSharedPreferences(PaddyGetBackgroundActivity.this);            background = sharedpreference.getInt(Values.BACKGROUND_RESOURCE_ID, 0);            if (background == 0) {                kenburnsview_background_choice.setImageResource(R.drawable.b2);            } else {                kenburnsview_background_choice.setImageResource(background);            }        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == Utils.PICK_IMAGE && resultCode == Activity.RESULT_OK) {            if (data == null) {                //Display an error                return;            }            String realPath = "";            try {                if (Build.VERSION.SDK_INT < 19)                    realPath = RealPathUtil.getRealPathFromURI_API11to18(this, data.getData());                    // SDK > 19 (Android 4.4)                else {                    try {                        realPath = RealPathUtil.getRealPathFromURI_API19(this, data.getData());                    } catch (Exception e) {                        try {                            realPath = RealPathUtil.getRealPathFromURI_API11to18(this, data.getData());                        } catch (Exception e1) {                        }                    }                }            } catch (Exception e) {            }            mEditor.putBoolean(Values.BACKGROUND_RESOUECE_BOLEAN, false);            mEditor.putString(Values.BACKGROUND_URI, realPath);            mEditor.commit();            finish();//            Intent intent = new Intent("com.gppady.launcher.change");//            sendBroadcast(intent);            Drawable myDrawable = Drawable.createFromPath(realPath);            Bitmap bitmap = null;            bitmap = ((BitmapDrawable) myDrawable).getBitmap();            MyApplication.blur = Blur.fastblur(PaddyGetBackgroundActivity.this, bitmap, 25);            ;//            GPApplication.getBlur(PaddyGetBackgroundActivity.this, getContentResolver());//            Uri uri = data.getData();//            mEditor.putBoolean(Values.BACKGROUND_RESOUECE_BOOLEAN, false);//            mEditor.putString(Values.BACKGROUND_URI, uri.toString());//            mEditor.commit();//            finish();//            Intent intent = new Intent("com.gppady.launcher.change");//            sendBroadcast(intent);//            GPApplication.getBlur(PaddyGetBackgroundActivity.this, getContentResolver());        }        // if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK &&        // null != data)        // {        // Uri selectedImage = data.getData();        // String[] filePathColumn = { MediaStore.Images.Media.DATA };        // Cursor cursor = getContentResolver().query(selectedImage,        // filePathColumn, null, null, null);        // cursor.moveToFirst();        // int columnIndex = cursor.getColumnIndex(filePathColumn[0]);        // String picturePath = cursor.getString(columnIndex);        // cursor.close();        // Toast.makeText(getApplicationContext(), "Path file " + picturePath,        // Toast.LENGTH_LONG).show();        //        // boolean hasImage = false;        //        // for (int i = 0; i < myListBackEntities.size(); i++)        // {        // if (myListBackEntities.get(i).getPathImage().equals(picturePath))        // {        // hasImage = true;        // }        // }        // if (hasImage == false)        // {        // myListBackEntities.add(0, new BackEntity(R.drawable.background_lock2,        // picturePath));        // mViewHolderGetBackground.setListener();        // }        // else        // {        // Toast.makeText(getApplicationContext(), "File is exist!",        // Toast.LENGTH_LONG).show();        // }        // }    }}